## The functions below work together to take a specific matrix and create and store an
## inverse of that matrix in the global environment. The inverse of this matrix can be
## called at anytime when division by that matrix is required. The functions assume
## specific matrix is square and invertable
## 

## run to initialize a place holder for the inverse of the matrix

makeCacheMatrix <- function(x = matrix()) {
     
      inv <- NULL
     
        set <- function(y) {
                x <<- y
               inv <<- NULL
        }
        get <- function() x
     
      setinv <- function(inval) inv <<- inval
        getinv <- function() inv
        list(set = set, get = get,
             setinv = setinv,
             getinv = getinv)
      
}
## use this function invert the specific matrix (solve) and store the results
## into the global inverted matrix variable. 

cacheSolve <- function(x, ...) {
        inv <- x$getinv()
        if(!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        data <- x$get()
        inv <- solve(data, ...)
        x$setinv(inv)
        inv
}
